import type { Config } from "tailwindcss";
import forms from "@tailwindcss/forms";

const config: Config = {
  content: ["./src/**/*.{js,ts,jsx,tsx,mdx}", "./app/**/*.{js,ts,jsx,tsx,mdx}"],
  theme: {
    colors: {
      transparent: "transparent",
      current: "currentColor",
      black: {
        DEFAULT: "#000000",
        he: "rgb(var(--color-black-he))",
        me: "rgb(var(--color-black-me))",
        le: "rgb(var(--color-black-le))",
        outline: "rgb(var(--color-black-outline))",
      },
      white: {
        DEFAULT: "#ffffff",
        he: "rgb(var(--color-white-he))",
        me: "rgb(var(--color-white-me))",
        le: "rgb(var(--color-white-le))",
        outline: "rgb(var(--color-white-outline))",
      },
      gray: {
        50: "rgb(var(--color-gray-50) / <alpha-value>)",
        100: "rgb(var(--color-gray-100) / <alpha-value>)",
        200: "rgb(var(--color-gray-200) / <alpha-value>)",
        300: "rgb(var(--color-gray-300) / <alpha-value>)",
        400: "rgb(var(--color-gray-400) / <alpha-value>)",
        500: "rgb(var(--color-gray-500) / <alpha-value>)",
        600: "rgb(var(--color-gray-600) / <alpha-value>)",
        700: "rgb(var(--color-gray-700) / <alpha-value>)",
        800: "rgb(var(--color-gray-800) / <alpha-value>)",
        900: "rgb(var(--color-gray-900) / <alpha-value>)",
        950: "rgb(var(--color-gray-950) / <alpha-value>)",
      },
      teal: {
        50: "rgb(var(--color-teal-50) / <alpha-value>)",
        100: "rgb(var(--color-teal-100) / <alpha-value>)",
        200: "rgb(var(--color-teal-200) / <alpha-value>)",
        300: "rgb(var(--color-teal-300) / <alpha-value>)",
        400: "rgb(var(--color-teal-400) / <alpha-value>)",
        500: "rgb(var(--color-teal-500) / <alpha-value>)",
        600: "rgb(var(--color-teal-600) / <alpha-value>)",
        700: "rgb(var(--color-teal-700) / <alpha-value>)",
        800: "rgb(var(--color-teal-800) / <alpha-value>)",
        900: "rgb(var(--color-teal-900) / <alpha-value>)",
        950: "rgb(var(--color-teal-950) / <alpha-value>)",
      },
      yellow: {
        50: "rgb(var(--color-yellow-50) / <alpha-value>)",
        100: "rgb(var(--color-yellow-100) / <alpha-value>)",
        200: "rgb(var(--color-yellow-200) / <alpha-value>)",
        300: "rgb(var(--color-yellow-300) / <alpha-value>)",
        400: "rgb(var(--color-yellow-400) / <alpha-value>)",
        500: "rgb(var(--color-yellow-500) / <alpha-value>)",
        600: "rgb(var(--color-yellow-600) / <alpha-value>)",
        700: "rgb(var(--color-yellow-700) / <alpha-value>)",
        800: "rgb(var(--color-yellow-800) / <alpha-value>)",
        900: "rgb(var(--color-yellow-900) / <alpha-value>)",
        950: "rgb(var(--color-yellow-950) / <alpha-value>)",
      },
      red: {
        50: "rgb(var(--color-red-50) / <alpha-value>)",
        100: "rgb(var(--color-red-100) / <alpha-value>)",
        200: "rgb(var(--color-red-200) / <alpha-value>)",
        300: "rgb(var(--color-red-300) / <alpha-value>)",
        400: "rgb(var(--color-red-400) / <alpha-value>)",
        500: "rgb(var(--color-red-500) / <alpha-value>)",
        600: "rgb(var(--color-red-600) / <alpha-value>)",
        700: "rgb(var(--color-red-700) / <alpha-value>)",
        800: "rgb(var(--color-red-800) / <alpha-value>)",
        900: "rgb(var(--color-red-900) / <alpha-value>)",
        950: "rgb(var(--color-red-950) / <alpha-value>)",
      },
      blue: {
        50: "rgb(var(--color-blue-50) / <alpha-value>)",
        100: "rgb(var(--color-blue-100) / <alpha-value>)",
        200: "rgb(var(--color-blue-200) / <alpha-value>)",
        300: "rgb(var(--color-blue-300) / <alpha-value>)",
        400: "rgb(var(--color-blue-400) / <alpha-value>)",
        500: "rgb(var(--color-blue-500) / <alpha-value>)",
        600: "rgb(var(--color-blue-600) / <alpha-value>)",
        700: "rgb(var(--color-blue-700) / <alpha-value>)",
        800: "rgb(var(--color-blue-800) / <alpha-value>)",
        900: "rgb(var(--color-blue-900) / <alpha-value>)",
        950: "rgb(var(--color-blue-950) / <alpha-value>)",
      },
      primary: {
        50: "rgb(var(--color-primary-50) / <alpha-value>)",
        100: "rgb(var(--color-primary-100) / <alpha-value>)",
        200: "rgb(var(--color-primary-200) / <alpha-value>)",
        300: "rgb(var(--color-primary-300) / <alpha-value>)",
        400: "rgb(var(--color-primary-400) / <alpha-value>)",
        500: "rgb(var(--color-primary-500) / <alpha-value>)",
        600: "rgb(var(--color-primary-600) / <alpha-value>)",
        700: "rgb(var(--color-primary-700) / <alpha-value>)",
        800: "rgb(var(--color-primary-800) / <alpha-value>)",
        900: "rgb(var(--color-primary-900) / <alpha-value>)",
        950: "rgb(var(--color-primary-950) / <alpha-value>)",
      },
      surface: {
        1: "rgb(var(--color-surface-1))",
        2: "rgb(var(--color-surface-2))",
        3: "rgb(var(--color-surface-3))",
        brand: {
          1: "rgb(var(--color-surface-brand-1))",
          2: "rgb(var(--color-surface-brand-2))",
          3: "rgb(var(--color-surface-brand-3))",
        },
        inverted: {
          1: "rgb(var(--color-surface-inverted-1))",
          2: "rgb(var(--color-surface-inverted-2))",
          3: "rgb(var(--color-surface-inverted-3))",
        },
      },
      type: {
        he: "rgb(var(--color-type-he))",
        me: "rgb(var(--color-type-me))",
        le: "rgb(var(--color-type-le))",
        brand: {
          he: "rgb(var(--color-type-brand-he))",
          me: "rgb(var(--color-type-brand-me))",
          le: "rgb(var(--color-type-brand-le))",
        },
        inverted: {
          he: "rgb(var(--color-type-inverted-he))",
          me: "rgb(var(--color-type-inverted-me))",
          le: "rgb(var(--color-type-inverted-le))",
        },
        link: {
          he: "rgb(var(--color-type-link-he))",
          me: "rgb(var(--color-type-link-me))",
          le: "rgb(var(--color-type-link-le))",
        },
      },
      outline: {
        primary: "rgb(var(--color-outline-primary))",
      },
    },
    extend: {},
  },
  plugins: [forms],
};
export default config;
